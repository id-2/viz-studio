{"version":3,"sources":["SketchUtils/SketchCell.tsx","SketchUtils/plot.ts","SketchUtils/latex.ts","SketchUtils/p5.ts","Notebook.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SketchCell","start","duration","rate","width","height","playButtonSize","autoPlay","loop","code","p","s","setup","draw","t","codeString","cellRef","useRef","timeSliderRef","sketchState","current","useEffect","useState","shouldPlay","setPlay","Sketch","timeSlider","time","c","eval","e","console","error","getFriendlyTime","floor","getFriendlyDuration","formatTimeAndDuration","updateTime","value","html","createCanvas","textSize","noStroke","noLoop","createSlider","style","addClass","parent","createSpan","nextT","myRef","p5Ref","remove","p5","ref","className","onClick","plot2D","prototype","end","xFn","yFn","color","strokeWeight","this","stroke","noFill","beginShape","curveVertex","i","endShape","latex","text","x","y","tex","position","katex","render","elt","templateProgram","EditorCell","updateOnChange","setCodeString","mode","theme","name","onChange","newValue","undefined","onBlur","editor","getValue","defaultValue","editorProps","$blockScrolling","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","App","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b46cdb9d.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport p5 from './p5';\nimport './slider.scss'\nimport './play-button.scss'\nimport './cell.scss';\n\nexport default function SketchCell(\n  {\n    start = 0,\n    duration = 500,\n    rate = 1,\n    width= 710,\n    height = 400,\n    playButtonSize = 30,\n    autoPlay = true,\n    loop = false,\n    code = (p: p5, s: any) => ({\n      setup: () => {},\n      draw: (t) => {},\n    }),\n    codeString = \"\",\n  }\n) {\n  const cellRef = useRef(null);\n  const timeSliderRef = useRef(null);\n\n  const sketchState = useRef({\n    t: 0,\n    start,\n    duration,\n    rate,\n    width,\n    height,\n    loop,\n    autoPlay,\n    codeString,\n  });\n\n  const s = sketchState.current;\n\n  useEffect(() => {\n    s.start = start;\n    s.duration = duration;\n    s.rate = rate;\n    s.width = width;\n    s.height = height;\n    s.loop = loop\n    s.autoPlay = autoPlay\n    s.codeString = codeString;\n  }, [start, duration, rate, width, height, loop, autoPlay, s, codeString])\n\n  const [shouldPlay, setPlay] = useState(autoPlay);\n\n  const Sketch = (p) => {\n\n    let timeSlider;\n    let time;\n    // let countSlider;\n    const c = s.codeString ? (\n      (() => {\n        try {\n          return eval(s.codeString)(p, s)\n        } catch (e) {\n          console.error(\"Failed to compile.\")\n        }\n      })()\n    ): code(p, s);\n\n    const getFriendlyTime = () => p.floor(s.start + s.t);\n    const getFriendlyDuration = () => p.floor(s.start + s.duration);\n    const formatTimeAndDuration = () => `${getFriendlyTime()} / ${getFriendlyDuration()}`;\n\n    const updateTime = (t) => {\n      timeSlider.value(t);\n      time.html(formatTimeAndDuration());\n    };\n\n    p.setup = () => {\n      // create canvas\n      p.createCanvas(width, height);\n      p.textSize(15);\n      p.noStroke();\n\n      if (!shouldPlay && (timeSlider && timeSlider.value() === s.t)) {\n        p.noLoop();\n      }\n\n      // create sliders\n      timeSlider = p.createSlider(0, s.duration, s.t, 0.01);\n      timeSlider.style('width', `${width - playButtonSize - 8}px`);\n      timeSlider.style('margin-left', `${playButtonSize}px`);\n      timeSlider.addClass('e-range');\n      timeSlider.parent(timeSliderRef.current);\n\n      time = p.createSpan(formatTimeAndDuration());\n      time.addClass('seek-time');\n      time.parent(timeSliderRef.current);\n\n      if (c && c.setup) {\n        c.setup();\n      }\n\n      // countSlider = p.createSlider(0, 300, s.count, 0.01);\n      // countSlider.style('width', '200px');\n      // countSlider.addClass('e-range');\n      // countSlider.addClass('count-slider');\n      //\n      // const countSliderContainer = p.createDiv();\n      // countSliderContainer.addClass(\"count-slider-container\")\n      // countSliderContainer.parent(document.querySelector(\".sliders\"));\n      //\n      // const text = p.createSpan(\"Length\");\n      // text.parent(countSliderContainer);\n      // countSlider.parent(countSliderContainer);\n    }\n\n    p.draw = () => {\n      if (timeSlider.value() !== s.t) {\n        s.t = timeSlider.value();\n        updateTime(s.t);\n      }\n\n      let nextT = shouldPlay ? (s.t + s.rate) % s.duration : s.t;\n      if (c && c.draw) {\n        c.draw(s.start + s.t, s.start + nextT);\n      }\n\n      if (shouldPlay) {\n        s.t = nextT;\n        updateTime(s.t);\n        if (!loop && s.t + s.rate >= s.duration) {\n          setPlay(false);\n          updateTime(0);\n        }\n      }\n    }\n  }\n\n  const myRef = useRef<HTMLDivElement>(null);\n  const p5Ref = useRef<p5>(null);\n  useEffect(() => {\n      if (p5Ref.current != null) {\n        p5Ref.current.remove();\n      }\n      p5Ref.current = new p5(Sketch, myRef.current);\n    }\n  );\n\n  return (\n    <div ref={cellRef} className={\"cell\"}>\n      <div className={\"sketch\"} ref={myRef}/>\n      <div ref={timeSliderRef} className={\"time-slider\"}/>\n      <button\n        className={`play-button${!shouldPlay ? '' : ' paused'}`}\n        onClick={() => {setPlay(!shouldPlay); }}\n      />\n      {/**\n        <div className={\"info\"}>\n          Controls:\n          <div className={\"sliders\"}>\n          </div>\n        </div>\n      */}\n    </div>\n  );\n}","import p5 from 'p5';\n\nexport const plot2D = p5.prototype.plot2D = function (\n  start, end, xFn, yFn, color = '#F76C5E', strokeWeight = 3\n) {\n  this.stroke(color);\n  this.strokeWeight(strokeWeight);\n  this.noFill();\n  this.beginShape();\n  this.curveVertex(xFn(start), yFn(start));\n  for (let i = start; i < end - 1; i++) {\n    this.curveVertex(xFn(i), yFn(i));\n  }\n  this.curveVertex(xFn(end - 1), yFn(end - 1));\n  this.curveVertex(xFn(end - 1), yFn(end - 1));\n  this.endShape();\n}","import p5 from 'p5';\nimport katex from 'katex';\n\nexport const latex = p5.prototype.latex = function latex(\n  text, x = 0, y = 0\n) {\n  let tex = this.createSpan();\n  tex.style('font-size', `${this.textSize()}px`);\n  tex.position(x, y);\n  katex.render(text, tex.elt);\n}","import p5 from 'p5';\nimport {plot2D} from \"./plot\";\nimport {latex} from \"./latex\";\n\np5.prototype.plot2D = plot2D;\np5.prototype.latex = latex;\n\nexport default p5;\n","import React, {useRef, useState} from \"react\";\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-jsx\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\nimport \"ace-builds/src-noconflict/ext-language_tools\"\nimport SketchCell from \"./SketchUtils/SketchCell\";\n\nconst templateProgram = `(p, s) => {\n    s.start = 153;\n    s.duration = 531 - 153;\n\n    const setup = () => {\n      p.textSize(15);\n      p.latex(\"x = \\\\\\\\sum_{i=1}^{3} sin(\\\\\\\\frac{t}{10i})\", 8, 8);\n    };\n\n    const draw = (t, nextT) => {\n      p.background(0);\n      plot(t);\n    };\n\n    const plot = (t, tail = 100, color = '#F76C5E') => {\n      p.plot2D(Math.max(0, t - tail), t, x1, y1_, color, 3);\n    }\n\n    const x1 = (t) => {\n      // return t;\n      let scale = s.width / 10;\n      return s.width / 2 + scale * (p.sin(t/10) + p.sin(t/20) + p.sin(t/30));\n    }\n\n    const y1_ = (t) => {\n      return s.height - y1(t);\n    }\n\n    const y1 = (t) => {\n      // return t;\n      let scale = s.width / 10;\n      return s.height / 2 + scale * (p.cos(t / 10) + p.cos(t / 20) + p.cos(t / 30));\n    }\n    return {setup, draw};\n  };\n`;\n\nexport default function EditorCell({\n  width = 700,\n  updateOnChange = false,\n}) {\n  const [codeString, setCodeString] = useState(templateProgram);\n  const onChange = (newValue) => {\n    setCodeString(newValue);\n  };\n  const onBlur = (e, editor) => {\n    setCodeString(editor.getValue());\n  };\n  return (\n    <div>\n      <SketchCell\n        width={width}\n        height={(4/7) * width}\n        codeString={codeString}\n        rate={1}\n        loop={true}\n      />\n      <AceEditor\n        style={{width: `${width}px`}}\n        // height={`${height}px`}\n        mode=\"jsx\"\n        theme=\"monokai\"\n        name=\"UNIQUE_ID_OF_DIV\"\n        onChange={updateOnChange ? onChange : undefined}\n        onBlur={!updateOnChange ? onBlur : undefined}\n        defaultValue={templateProgram}\n        editorProps={{ $blockScrolling: true }}\n        setOptions={{\n          enableBasicAutocompletion: true,\n          enableLiveAutocompletion: true,\n          enableSnippets: true\n        }}\n      />\n    </div>\n  );\n}","import React, {useLayoutEffect, useState} from 'react';\nimport SketchCell from \"./SketchUtils/SketchCell\";\nimport './App.css';\nimport EditorCell from \"./Notebook\";\n\nfunction App() {\n  // const code = (p, s) => {\n  //   const setup = () => {\n  //     p.textSize(15);\n  //     p.latex(\"x = \\\\sum_{i=1}^{3} sin(\\\\frac{t}{10i})\", 8, 8);\n  //   };\n  //\n  //   const draw = (t) => {\n  //     p.background(0);\n  //     plot(t);\n  //   };\n  //\n  //   const plot = (t, length= 100, color = '#F76C5E') => {\n  //     p.plot2D(t, length, x1, y1_, color, 3);\n  //   }\n  //\n  //   const x1 = (t) => {\n  //     // return t;\n  //     let scale = s.width / 10;\n  //     return s.width / 2 + scale * (p.sin(t/10) + p.sin(t/20) + p.sin(t/30));\n  //   }\n  //\n  //   const y1_ = (t) => {\n  //     return s.height - y1(t);\n  //   }\n  //\n  //   const y1 = (t) => {\n  //     // return t;\n  //     let scale = s.width / 10;\n  //     return s.height / 2 + scale * (p.cos(t / 10) + p.cos(t / 20) + p.cos(t / 30));\n  //   }\n  //   return {setup, draw};\n  // };\n\n  function useWindowSize() {\n    const [size, setSize] = useState([0, 0]);\n    useLayoutEffect(() => {\n      function updateSize() {\n        setSize([window.innerWidth, window.innerHeight]);\n      }\n      window.addEventListener('resize', updateSize);\n      updateSize();\n      return () => window.removeEventListener('resize', updateSize);\n    }, []);\n    return size;\n  }\n\n  const [width, _] = useWindowSize();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/*<SketchCell*/}\n        {/*  height={200}*/}\n        {/*  width={200}*/}\n        {/*  code={code}*/}\n        {/*  rate={2}*/}\n        {/*/>*/}\n        {width && <EditorCell width={width} />}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}