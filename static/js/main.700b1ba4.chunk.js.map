{"version":3,"sources":["SketchUtils/SketchCell.tsx","SketchUtils/plot.ts","SketchUtils/latex.ts","SketchUtils/p5.ts","Notebook.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SketchCell","duration","rate","width","height","playButtonSize","autoPlay","loop","code","p","s","setup","draw","t","codeString","cellRef","useRef","timeSliderRef","sketchState","count","current","useEffect","useState","shouldPlay","setPlay","Sketch","timeSlider","c","eval","e","console","error","log","createCanvas","textSize","noStroke","value","noLoop","createSlider","style","addClass","parent","nextT","myRef","p5Ref","remove","p5","ref","className","onClick","plot2D","prototype","start","end","xFn","yFn","color","strokeWeight","this","stroke","noFill","beginShape","curveVertex","i","endShape","latex","text","x","y","tex","createSpan","position","katex","render","elt","templateProgram","EditorCell","updateOnChange","setCodeString","mode","theme","name","onChange","newValue","undefined","onBlur","editor","getValue","defaultValue","editorProps","$blockScrolling","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","App","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"o2CAMe,SAASA,WAAT,MAeZ,IAAD,mBAbEC,uBAaF,kBAba,IAab,6BAZEC,eAYF,cAZS,EAYT,0BAXEC,iBAWF,eAXS,IAWT,4BAVEC,mBAUF,gBAVW,IAUX,qCATEC,mCASF,wBATmB,GASnB,uCAREC,uBAQF,gDAPEC,eAOF,wCANEC,eAMF,cANS,SAACC,EAAOC,GAAR,MAAoB,CACzBC,MAAO,aACPC,KAAM,SAACC,OAIX,+BAFEC,2BAEF,oBAFe,GAEf,gBACMC,QAAUC,kDAAO,MACjBC,cAAgBD,kDAAO,MAEvBE,YAAcF,kDAAO,CACzBf,kBACAY,EAAG,EACHM,MAAO,IACPhB,MAAOA,MACPC,OAAQA,OACRU,wBAGIJ,EAAIQ,YAAYE,QAEtBC,sDAAU,WACRX,EAAEP,MAAQA,MACVO,EAAEN,OAASA,OACXM,EAAEI,WAAaA,aACd,CAACX,MAAOC,OAAQM,EAAGI,aAEtB,cAA8BQ,oDAAShB,UAAvC,iMAAOiB,WAAP,cAAmBC,QAAnB,cAEMC,OAAS,SAATA,OAAUhB,GAEd,IAAIiB,WAEEC,EAAIjB,EAAEI,WACT,WACC,IACE,OAAOc,KAAKlB,EAAEI,WAAPc,CAAmBnB,EAAGC,GAC7B,MAAOmB,GACPC,QAAQC,MAAM,uBAJjB,GAOAvB,KAAKC,EAAGC,GAEXD,EAAEE,MAAQ,WACRmB,QAAQE,IAAI,kBAEZvB,EAAEwB,aAAa9B,MAAOC,QACtBK,EAAEyB,SAAS,IACXzB,EAAE0B,YAEGZ,YAAeG,YAAcA,WAAWU,UAAY1B,EAAEG,GACzDJ,EAAE4B,UAIJX,WAAajB,EAAE6B,aAAa,EAAG5B,EAAET,SAAUS,EAAEG,EAAG,MACrC0B,MAAM,QAAjB,UAA6BpC,MAAQE,eAAiB,EAAtD,OACAqB,WAAWa,MAAM,cAAjB,UAAmClC,eAAnC,OACAqB,WAAWc,SAAS,WAEhBvB,cAAcG,SAChBM,WAAWe,OAAOxB,cAAcG,SAG9BO,GACFA,EAAEhB,SAiBNF,EAAEG,KAAO,WACHc,WAAWU,UAAY1B,EAAEG,IAC3BH,EAAEG,EAAIa,WAAWU,SAGnB,IAAIM,EAAQnB,YAAcb,EAAEG,EAAIX,MAAQQ,EAAET,SAAWS,EAAEG,EACnDc,GACFA,EAAEf,KAAKF,EAAEG,EAAG6B,GAGVnB,aACFb,EAAEG,EAAI6B,EACNhB,WAAWU,MAAM1B,EAAEG,IACdN,MAAQG,EAAEG,EAAIX,MAAQQ,EAAET,WAC3BuB,SAAQ,GACRE,WAAWU,MAAM,OAMnBO,MAAQ3B,kDAAuB,MAC/B4B,MAAQ5B,kDAAW,MASzB,OARAK,sDAAU,WACe,MAAjBuB,MAAMxB,SACRwB,MAAMxB,QAAQyB,SAEhBD,MAAMxB,QAAU,IAAI0B,mCAAGrB,OAAQkB,MAAMvB,YAKvC,mEAAK2B,IAAKhC,QAASiC,UAAW,OAA9B,UACE,kEAAKA,UAAW,SAAUD,IAAKJ,QAC/B,kEAAKI,IAAK9B,cAAe+B,UAAW,gBACpC,qEACEA,UAAS,qBAAiBzB,WAAkB,UAAL,IACvC0B,QAAS,WAAOzB,SAASD,oB,oDCpIpB2B,EAASJ,IAAGK,UAAUD,OAAS,SAC1CE,EAAOC,EAAKC,EAAKC,GAChB,IADqBC,EACtB,uDAD8B,UAAWC,EACzC,uDADwD,EAExDC,KAAKC,OAAOH,GACZE,KAAKD,aAAaA,GAClBC,KAAKE,SACLF,KAAKG,aACLH,KAAKI,YAAYR,EAAIF,GAAQG,EAAIH,IACjC,IAAK,IAAIW,EAAI,EAAGA,EAAIV,EAAM,EAAGU,IAC3BL,KAAKI,YAAYR,EAAIF,EAAQW,GAAIR,EAAIH,EAAQW,IAE/CL,KAAKI,YAAYR,EAAIF,EAAQC,EAAM,GAAIE,EAAIH,EAAQC,EAAM,IACzDK,KAAKI,YAAYR,EAAIF,EAAQC,EAAM,GAAIE,EAAIH,EAAQC,EAAM,IACzDK,KAAKM,Y,iBCZMC,EAAQnB,IAAGK,UAAUc,MAAQ,SACxCC,GACC,IADKC,EACN,uDADU,EAAGC,EACb,uDADiB,EAEbC,EAAMX,KAAKY,aACfD,EAAI9B,MAAM,YAAV,UAA0BmB,KAAKxB,WAA/B,OACAmC,EAAIE,SAASJ,EAAGC,GAChBI,IAAMC,OAAOP,EAAMG,EAAIK,MCLzB5B,IAAGK,UAAUD,OAASA,EACtBJ,IAAGK,UAAUc,MAAQA,EAENnB,MAAf,G,gQCAM6B,EAAe,+wBAkCN,SAASC,EAAT,GAGX,IAAD,IAFDzE,aAEC,MAFO,IAEP,MADD0E,sBACC,SACD,EAAoCvD,mBAASqD,GAA7C,mBAAO7D,EAAP,KAAmBgE,EAAnB,KAOA,OACE,gCACE,cAAC9E,EAAA,EAAD,CACEG,MAAOA,EACPC,OAAS,EAAE,EAAKD,EAChBW,WAAYA,EACZZ,KAAM,EACNK,MAAM,IAER,cAAC,IAAD,CACEgC,MAAO,CAACpC,MAAM,GAAD,OAAKA,EAAL,OAEb4E,KAAK,MACLC,MAAM,UACNC,KAAK,mBACLC,SAAUL,EArBC,SAACM,GAChBL,EAAcK,SAoB4BC,EACtCC,OAASR,OAA0BO,EAnB1B,SAACvD,EAAGyD,GACjBR,EAAcQ,EAAOC,aAmBjBC,aAAcb,EACdc,YAAa,CAAEC,iBAAiB,GAChCC,WAAY,CACVC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,gBAAgB,QCLXC,MAhEf,WA+CE,MAbA,WACE,MAAwBzE,mBAAS,CAAC,EAAG,IAArC,mBAAO0E,EAAP,KAAaC,EAAb,KASA,OARAC,2BAAgB,WACd,SAASC,IACPF,EAAQ,CAACG,OAAOC,WAAYD,OAAOE,cAIrC,OAFAF,OAAOG,iBAAiB,SAAUJ,GAClCA,IACO,kBAAMC,OAAOI,oBAAoB,SAAUL,MACjD,IACIH,EAGUS,GAAnB,mBAAOtG,EAAP,KAEA,OAFA,KAGE,qBAAK6C,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SAOG7C,GAAS,cAACyE,EAAD,CAAYzE,MAAOA,SCjDtBuG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAAS1C,OACP,cAAC,IAAM2C,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.700b1ba4.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport p5 from './p5';\nimport './slider.scss'\nimport './play-button.scss'\nimport './cell.scss';\n\nexport default function SketchCell(\n  {\n    duration = 500,\n    rate = 1,\n    width= 710,\n    height = 400,\n    playButtonSize = 30,\n    autoPlay = true,\n    loop = false,\n    code = (p: p5, s: any) => ({\n      setup: () => {},\n      draw: (t) => {},\n    }),\n    codeString = \"\",\n  }\n) {\n  const cellRef = useRef(null);\n  const timeSliderRef = useRef(null);\n\n  const sketchState = useRef({\n    duration,\n    t: 0,\n    count: 100,\n    width: width,\n    height: height,\n    codeString,\n  });\n\n  const s = sketchState.current;\n\n  useEffect(() => {\n    s.width = width;\n    s.height = height;\n    s.codeString = codeString;\n  }, [width, height, s, codeString])\n\n  const [shouldPlay, setPlay] = useState(autoPlay);\n\n  const Sketch = (p) => {\n\n    let timeSlider;\n    // let countSlider;\n    const c = s.codeString ? (\n      (() => {\n        try {\n          return eval(s.codeString)(p, s)\n        } catch (e) {\n          console.error(\"Failed to compile.\")\n        }\n      })()\n    ): code(p, s);\n\n    p.setup = () => {\n      console.log(\"Call to setup.\");\n      // create canvas\n      p.createCanvas(width, height);\n      p.textSize(15);\n      p.noStroke();\n\n      if (!shouldPlay && (timeSlider && timeSlider.value() === s.t)) {\n        p.noLoop();\n      }\n\n      // create sliders\n      timeSlider = p.createSlider(0, s.duration, s.t, 0.01);\n      timeSlider.style('width', `${width - playButtonSize - 8}px`);\n      timeSlider.style('margin-left', `${playButtonSize}px`);\n      timeSlider.addClass('e-range');\n\n      if (timeSliderRef.current) {\n        timeSlider.parent(timeSliderRef.current);\n      }\n\n      if (c) {\n        c.setup();\n      }\n\n      // countSlider = p.createSlider(0, 300, s.count, 0.01);\n      // countSlider.style('width', '200px');\n      // countSlider.addClass('e-range');\n      // countSlider.addClass('count-slider');\n      //\n      // const countSliderContainer = p.createDiv();\n      // countSliderContainer.addClass(\"count-slider-container\")\n      // countSliderContainer.parent(document.querySelector(\".sliders\"));\n      //\n      // const text = p.createSpan(\"Length\");\n      // text.parent(countSliderContainer);\n      // countSlider.parent(countSliderContainer);\n    }\n\n    p.draw = () => {\n      if (timeSlider.value() !== s.t) {\n        s.t = timeSlider.value();\n      }\n\n      let nextT = shouldPlay ? (s.t + rate) % s.duration : s.t;\n      if (c) {\n        c.draw(s.t, nextT);\n      }\n\n      if (shouldPlay) {\n        s.t = nextT;\n        timeSlider.value(s.t);\n        if (!loop && s.t + rate >= s.duration) {\n          setPlay(false);\n          timeSlider.value(0);\n        }\n      }\n    }\n  }\n\n  const myRef = useRef<HTMLDivElement>(null);\n  const p5Ref = useRef<p5>(null);\n  useEffect(() => {\n      if (p5Ref.current != null) {\n        p5Ref.current.remove();\n      }\n      p5Ref.current = new p5(Sketch, myRef.current);\n    }\n  );\n\n  return (\n    <div ref={cellRef} className={\"cell\"}>\n      <div className={\"sketch\"} ref={myRef}/>\n      <div ref={timeSliderRef} className={\"time-slider\"} />\n      <button\n        className={`play-button${!shouldPlay ? '' : ' paused'}`}\n        onClick={() => {setPlay(!shouldPlay); }}\n      />\n      {/**\n        <div className={\"info\"}>\n          Controls:\n          <div className={\"sliders\"}>\n          </div>\n        </div>\n      */}\n    </div>\n  );\n}","import p5 from 'p5';\n\nexport const plot2D = p5.prototype.plot2D = function (\n  start, end, xFn, yFn, color = '#F76C5E', strokeWeight = 3\n) {\n  this.stroke(color);\n  this.strokeWeight(strokeWeight);\n  this.noFill();\n  this.beginShape();\n  this.curveVertex(xFn(start), yFn(start));\n  for (let i = 0; i < end - 1; i++) {\n    this.curveVertex(xFn(start + i), yFn(start + i));\n  }\n  this.curveVertex(xFn(start + end - 1), yFn(start + end - 1));\n  this.curveVertex(xFn(start + end - 1), yFn(start + end - 1));\n  this.endShape();\n}","import p5 from 'p5';\nimport katex from 'katex';\n\nexport const latex = p5.prototype.latex = function latex(\n  text, x = 0, y = 0\n) {\n  let tex = this.createSpan();\n  tex.style('font-size', `${this.textSize()}px`);\n  tex.position(x, y);\n  katex.render(text, tex.elt);\n}","import p5 from 'p5';\nimport {plot2D} from \"./plot\";\nimport {latex} from \"./latex\";\n\np5.prototype.plot2D = plot2D;\np5.prototype.latex = latex;\n\nexport default p5;\n","import React, {useRef, useState} from \"react\";\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-jsx\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\nimport \"ace-builds/src-noconflict/ext-language_tools\"\nimport SketchCell from \"./SketchUtils/SketchCell\";\n\nconst templateProgram = `(p, s) => {\n    const setup = () => {\n      p.textSize(15);\n      p.latex(\"x = \\\\\\\\sum_{i=1}^{3} sin(\\\\\\\\frac{t}{10i})\", 8, 8);\n    };\n\n    const draw = (t, nextT) => {\n      p.background(0);\n      plot(t);\n    };\n\n    const plot = (t, length= 100, color = '#F76C5E') => {\n      p.plot2D(t, length, x1, y1_, color, 3);\n    }\n\n    const x1 = (t) => {\n      // return t;\n      let scale = s.width / 10;\n      return s.width / 2 + scale * (p.sin(t/10) + p.sin(t/20) + p.sin(t/30));\n    }\n\n    const y1_ = (t) => {\n      return s.height - y1(t);\n    }\n\n    const y1 = (t) => {\n      // return t;\n      let scale = s.width / 10;\n      return s.height / 2 + scale * (p.cos(t / 10) + p.cos(t / 20) + p.cos(t / 30));\n    }\n    return {setup, draw};\n  };\n`;\n\nexport default function EditorCell({\n  width = 700,\n  updateOnChange = false,\n}) {\n  const [codeString, setCodeString] = useState(templateProgram);\n  const onChange = (newValue) => {\n    setCodeString(newValue);\n  };\n  const onBlur = (e, editor) => {\n    setCodeString(editor.getValue());\n  };\n  return (\n    <div>\n      <SketchCell\n        width={width}\n        height={(4/7) * width}\n        codeString={codeString}\n        rate={1}\n        loop={true}\n      />\n      <AceEditor\n        style={{width: `${width}px`}}\n        // height={`${height}px`}\n        mode=\"jsx\"\n        theme=\"monokai\"\n        name=\"UNIQUE_ID_OF_DIV\"\n        onChange={updateOnChange ? onChange : undefined}\n        onBlur={!updateOnChange ? onBlur : undefined}\n        defaultValue={templateProgram}\n        editorProps={{ $blockScrolling: true }}\n        setOptions={{\n          enableBasicAutocompletion: true,\n          enableLiveAutocompletion: true,\n          enableSnippets: true\n        }}\n      />\n    </div>\n  );\n}","import React, {useLayoutEffect, useState} from 'react';\nimport SketchCell from \"./SketchUtils/SketchCell\";\nimport './App.css';\nimport EditorCell from \"./Notebook\";\n\nfunction App() {\n  // const code = (p, s) => {\n  //   const setup = () => {\n  //     p.textSize(15);\n  //     p.latex(\"x = \\\\sum_{i=1}^{3} sin(\\\\frac{t}{10i})\", 8, 8);\n  //   };\n  //\n  //   const draw = (t) => {\n  //     p.background(0);\n  //     plot(t);\n  //   };\n  //\n  //   const plot = (t, length= 100, color = '#F76C5E') => {\n  //     p.plot2D(t, length, x1, y1_, color, 3);\n  //   }\n  //\n  //   const x1 = (t) => {\n  //     // return t;\n  //     let scale = s.width / 10;\n  //     return s.width / 2 + scale * (p.sin(t/10) + p.sin(t/20) + p.sin(t/30));\n  //   }\n  //\n  //   const y1_ = (t) => {\n  //     return s.height - y1(t);\n  //   }\n  //\n  //   const y1 = (t) => {\n  //     // return t;\n  //     let scale = s.width / 10;\n  //     return s.height / 2 + scale * (p.cos(t / 10) + p.cos(t / 20) + p.cos(t / 30));\n  //   }\n  //   return {setup, draw};\n  // };\n\n  function useWindowSize() {\n    const [size, setSize] = useState([0, 0]);\n    useLayoutEffect(() => {\n      function updateSize() {\n        setSize([window.innerWidth, window.innerHeight]);\n      }\n      window.addEventListener('resize', updateSize);\n      updateSize();\n      return () => window.removeEventListener('resize', updateSize);\n    }, []);\n    return size;\n  }\n\n  const [width, _] = useWindowSize();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/*<SketchCell*/}\n        {/*  height={200}*/}\n        {/*  width={200}*/}\n        {/*  code={code}*/}\n        {/*  rate={2}*/}\n        {/*/>*/}\n        {width && <EditorCell width={width} />}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}