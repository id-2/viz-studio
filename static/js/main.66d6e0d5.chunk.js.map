{"version":3,"sources":["SketchUtils/SketchCell.tsx","SketchUtils/plot.ts","SketchUtils/latex.ts","SketchUtils/p5.ts","Notebook.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SketchCell","start","duration","rate","width","height","playButtonSize","autoPlay","loop","code","p","s","setup","draw","t","codeString","showRecordButton","canvasRef","useRef","cellRef","timeSliderRef","saveVideoRef","recorderRef","videoChunks","streamRef","sketchState","prevCodeString","current","useEffect","useState","shouldPlay","setPlay","shouldRecord","setRecord","isRecording","setRecording","record","stopRecording","exportVideo","e","blob","Blob","vid","document","createElement","id","controls","source","src","URL","createObjectURL","type","appendChild","body","play","MediaRecorder","audioBitsPerSecond","videoBitsPerSecond","mimeType","ondataavailable","data","size","console","log","push","onstop","Sketch","timeSlider","time","execCodeString","eval","c","result","error","getFriendlyTime","floor","getFriendlyDuration","formatTimeAndDuration","updateTime","value","html","stop","canvas","createCanvas","elt","captureStream","textSize","noStroke","noLoop","createSlider","style","addClass","parent","createSpan","nextT","myRef","p5Ref","remove","p5","ref","className","onClick","plot2D","prototype","end","xFn","yFn","color","strokeWeight","this","stroke","noFill","beginShape","curveVertex","i","endShape","latex","text","x","y","tex","position","katex","render","templateProgram","EditorCell","updateOnChange","setCodeString","mode","theme","name","onChange","debounce","newValue","undefined","onBlur","editor","getValue","defaultValue","editorProps","$blockScrolling","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","App","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"o2CAOe,SAASA,WAAT,MAgBZ,IAAD,gBAdEC,iBAcF,eAdU,EAcV,8BAbEC,uBAaF,kBAba,IAab,6BAZEC,eAYF,cAZS,EAYT,0BAXEC,iBAWF,eAXS,IAWT,4BAVEC,mBAUF,gBAVW,IAUX,qCATEC,mCASF,wBATmB,GASnB,uCAREC,uBAQF,gDAPEC,eAOF,wCANEC,eAMF,cANS,SAACC,EAAOC,GAAR,MAAoB,CACzBC,MAAO,aACPC,KAAM,SAACC,OAIX,+BAFEC,2BAEF,oBAFe,GAEf,gBACMC,kBAAmB,EAEnBC,UAAYC,kDAAO,MACnBC,QAAUD,kDAAO,MACjBE,cAAgBF,kDAAO,MACvBG,aAAeH,kDAAO,MACtBI,YAAcJ,kDAAO,MACrBK,YAAcL,kDAAO,IACrBM,UAAYN,kDAAO,MAEnBO,YAAcP,kDAAO,CACzBJ,EAAG,EACHb,YACAC,kBACAC,UACAC,YACAC,cACAG,UACAD,kBACAQ,sBACAW,eAAgBX,aAGZJ,EAAIc,YAAYE,QAEtBC,sDAAU,WACRjB,EAAEV,MAAQA,MACVU,EAAET,SAAWA,SACbS,EAAER,KAAOA,KACTQ,EAAEP,MAAQA,MACVO,EAAEN,OAASA,OACXM,EAAEH,KAAOA,KACTG,EAAEJ,SAAWA,SACbI,EAAEI,WAAaA,aACd,CAACd,MAAOC,SAAUC,KAAMC,MAAOC,OAAQG,KAAMD,SAAUI,EAAGI,aAE7D,cAA8Bc,oDAAStB,UAAvC,iMAAOuB,WAAP,cAAmBC,QAAnB,cACA,WAAkCF,qDAAS,GAA3C,kMAAOG,aAAP,cAAqBC,UAArB,cACA,WAAoCJ,qDAAS,GAA7C,kMAAOK,YAAP,cAAoBC,aAApB,cAEMC,OAAS,WACbH,WAAU,GACVV,YAAYI,QAAU,IAGlBU,cAAgB,WACpBJ,WAAU,IA2BZ,SAASK,YAAYC,GACnB,IAAIC,EAAO,IAAIC,KAAKlB,YAAYI,SAC5Be,EAAMC,SAASC,cAAc,SACjCF,EAAIG,GAAK,WACTH,EAAII,UAAW,EACf,IAAIC,EAASJ,SAASC,cAAc,UACpCG,EAAOC,IAAMC,IAAIC,gBAAgBV,GACjCO,EAAOI,KAAOX,EAAKW,KACnBT,EAAIU,YAAYL,GAChBJ,SAASU,KAAKD,YAAYV,GAC1BA,EAAIY,OAlCN1B,sDAAU,WACkB,OAAtBJ,UAAUG,SAGa,MAAvBL,YAAYK,UAEdL,YAAYK,QAAU,IAAI4B,cAAc/B,UAAUG,QAAS,CACzD6B,mBAAoB,EACpBC,mBAAoB,KACpBC,SAAU,eAGZpC,YAAYK,QAAQgC,gBAAkB,SAAApB,GAChCA,EAAEqB,KAAKC,OACTC,QAAQC,IAAI,YAAaxB,EAAEqB,MAE3BrC,YAAYI,QAAQqC,KAAKzB,EAAEqB,QAI/BtC,YAAYK,QAAQsC,OAAS3B,gBAiBjC,IAAM4B,OAAS,SAATA,OAAUxD,GAEd,IAAIyD,WACAC,KAEEC,eAAiB,SAAjBA,eAAkB5D,MAAD,OAAU6D,KAAK,mGAAD,OAKjC7D,KALiC,gNAe/B8D,EAAI5D,EAAEI,WACT,WACC,IACE,IAAMyD,EAASH,eAAe1D,EAAEI,YAEhC,OADAJ,EAAEe,eAAiBf,EAAEI,WACdyD,EACP,MAAOjC,GAEP,OADAuB,QAAQW,MAAM,qBAAsBlC,GAC7B8B,eAAe1D,EAAEe,iBAP3B,GAUAjB,KAAKC,EAAGC,GAEL+D,gBAAkB,kBAAMhE,EAAEiE,MAAMhE,EAAEV,MAAQU,EAAEG,IAC5C8D,oBAAsB,kBAAMlE,EAAEiE,MAAMhE,EAAEV,MAAQU,EAAET,WAChD2E,sBAAwB,2BAASH,kBAAT,cAAgCE,wBAExDE,WAAa,SAAChE,GAClBqD,WAAWY,MAAMjE,GACjBsD,KAAKY,KAAKH,0BAGNI,KAAO,WACXlD,SAAQ,GACJG,cACFC,cAAa,GAEbb,YAAYK,QAAQsD,QAEtBH,WAAW,IAGbpE,EAAEE,MAAQ,WAER,IAAMsE,EAASxE,EAAEyE,aAAa/E,MAAOC,QACrCmB,UAAUG,QAAUuD,EAAOE,IAAIC,cAAc,IAC7C3E,EAAE4E,SAAS,IACX5E,EAAE6E,YAEGzD,YAAeqC,YAAcA,WAAWY,UAAYpE,EAAEG,GACzDJ,EAAE8E,UAIJrB,WAAazD,EAAE+E,aAAa,EAAG9E,EAAET,SAAUS,EAAEG,EAAG,MACrC4E,MAAM,QAAjB,UAA6BtF,MAAQE,eAAiB,EAAtD,OACA6D,WAAWuB,MAAM,cAAjB,UAAmCpF,eAAnC,OACA6D,WAAWwB,SAAS,WACpBxB,WAAWyB,OAAOxE,cAAcO,UAEhCyC,KAAO1D,EAAEmF,WAAWhB,0BACfc,SAAS,aACdvB,KAAKwB,OAAOxE,cAAcO,SAEtB4C,GAAKA,EAAE3D,OACT2D,EAAE3D,SAiBNF,EAAEG,KAAO,WACHmB,eAAiBE,aACnB4C,WAAW,GACX3C,cAAa,GACbJ,SAAQ,GAERT,YAAYK,QAAQ1B,MAAM,OAChB+B,cAAgBE,cAE1BZ,YAAYK,QAAQsD,OACpB9C,cAAa,IAGXgC,WAAWY,UAAYpE,EAAEG,IAC3BH,EAAEG,EAAIqD,WAAWY,QACjBD,WAAWnE,EAAEG,IAGf,IAAIgF,EAAQhE,YAAcnB,EAAEG,EAAIH,EAAER,MAAQQ,EAAET,SAAWS,EAAEG,EACrDyD,GAAKA,EAAE1D,MACT0D,EAAE1D,KAAKF,EAAEV,MAAQU,EAAEG,EAAGH,EAAEV,MAAQ6F,GAG9BhE,aACFnB,EAAEG,EAAIgF,EACNhB,WAAWnE,EAAEG,IACRN,MAAQG,EAAEG,EAAIH,EAAER,MAAQQ,EAAET,UAC7B+E,UAMFc,MAAQ7E,kDAAuB,MAC/B8E,MAAQ9E,kDAAW,MASzB,OARAU,sDAAU,WACe,MAAjBoE,MAAMrE,SACRqE,MAAMrE,QAAQsE,SAEhBD,MAAMrE,QAAU,IAAIuE,mCAAGhC,OAAQ6B,MAAMpE,YAKvC,mEAAKwE,IAAKhF,QAASiF,UAAW,OAA9B,UACGpF,kBACC,qEACEmF,IAAK9E,aACLgF,QAAS,WACHnE,YACFG,gBAEAD,UANN,SASEF,YAAc,eAAiB,WAEnC,kEAAKkE,UAAW,SAAUD,IAAKJ,QAC/B,kEAAKI,IAAK/E,cAAegF,UAAW,gBACpC,qEACEA,UAAS,qBAAiBtE,WAAkB,UAAL,IACvCuE,QAAS,WAAOtE,SAASD,oB,oDCrQpBwE,EAASJ,IAAGK,UAAUD,OAAS,SAC1CrG,EAAOuG,EAAKC,EAAKC,GAChB,IADqBC,EACtB,uDAD8B,UAAWC,EACzC,uDADwD,EAExDC,KAAKC,OAAOH,GACZE,KAAKD,aAAaA,GAClBC,KAAKE,SACLF,KAAKG,aACLH,KAAKI,YAAYR,EAAIxG,GAAQyG,EAAIzG,IACjC,IAAK,IAAIiH,EAAIjH,EAAOiH,EAAIV,EAAM,EAAGU,IAC/BL,KAAKI,YAAYR,EAAIS,GAAIR,EAAIQ,IAE/BL,KAAKI,YAAYR,EAAID,EAAM,GAAIE,EAAIF,EAAM,IACzCK,KAAKI,YAAYR,EAAID,EAAM,GAAIE,EAAIF,EAAM,IACzCK,KAAKM,Y,iBCZMC,EAAQlB,IAAGK,UAAUa,MAAQ,SACxCC,GACC,IADKC,EACN,uDADU,EAAGC,EACb,uDADiB,EAEbC,EAAMX,KAAKhB,aACf2B,EAAI9B,MAAM,YAAV,UAA0BmB,KAAKvB,WAA/B,OACAkC,EAAIC,SAASH,EAAGC,GAChBG,IAAMC,OAAON,EAAMG,EAAIpC,MCLzBc,IAAGK,UAAUD,OAASA,EACtBJ,IAAGK,UAAUa,MAAQA,EAENlB,MAAf,G,uQCCM0B,EAAe,srBAkCN,SAASC,EAAT,GAGX,IAAD,IAFDzH,aAEC,MAFO,IAEP,MADD0H,sBACC,SACD,EAAoCjG,mBAAS+F,GAA7C,mBAAO7G,EAAP,KAAmBgH,EAAnB,KAOA,OACE,gCACE,cAAC/H,EAAA,EAAD,CACEI,MAAOA,EACPC,OAAS,EAAE,EAAKD,EAChBW,WAAYA,EACZZ,KAAM,EACNK,MAAM,IAGP,cAAC,IAAD,CACCkF,MAAO,CAACtF,MAAM,GAAD,OAAKA,EAAL,OAEb4H,KAAK,MACLC,MAAM,UACNC,KAAK,mBACLC,SAAUL,EAAiBM,oBAtBhB,SAACC,GAChBN,EAAcM,KAqBoC,UAAOC,EACrDC,OAAST,OAA0BQ,EApB1B,SAAC/F,EAAGiG,GACjBT,EAAcS,EAAOC,aAoBjBC,aAAcd,EACde,YAAa,CAAEC,iBAAiB,GAChCC,WAAY,CACVC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,gBAAgB,QCPXC,MAhEf,WA+CE,MAbA,WACE,MAAwBpH,mBAAS,CAAC,EAAG,IAArC,mBAAOgC,EAAP,KAAaqF,EAAb,KASA,OARAC,2BAAgB,WACd,SAASC,IACPF,EAAQ,CAACG,OAAOC,WAAYD,OAAOE,cAIrC,OAFAF,OAAOG,iBAAiB,SAAUJ,GAClCA,IACO,kBAAMC,OAAOI,oBAAoB,SAAUL,MACjD,IACIvF,EAGU6F,GAAnB,mBAAOtJ,EAAP,KAEA,OAFA,KAGE,qBAAKgG,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SAOGhG,GAAS,cAACyH,EAAD,CAAYzH,MAAOA,EAAO0H,gBAAgB,SCjD7C6B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASzC,OACP,cAAC,IAAM0C,WAAP,UACE,cAAC,EAAD,MAEF1H,SAAS2H,eAAe,SAM1BX,M","file":"static/js/main.66d6e0d5.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport p5 from './p5';\nimport './slider.scss'\nimport './play-button.scss'\nimport './cell.scss';\ndeclare var MediaRecorder: any;\n\nexport default function SketchCell(\n  {\n    start = 0,\n    duration = 500,\n    rate = 1,\n    width= 710,\n    height = 400,\n    playButtonSize = 30,\n    autoPlay = true,\n    loop = false,\n    code = (p: p5, s: any) => ({\n      setup: () => {},\n      draw: (t) => {},\n    }),\n    codeString = \"\",\n  }\n) {\n  const showRecordButton = false;\n  // const recorderRef = useRef(new Recorder());\n  const canvasRef = useRef(null);\n  const cellRef = useRef(null);\n  const timeSliderRef = useRef(null);\n  const saveVideoRef = useRef(null);\n  const recorderRef = useRef(null);\n  const videoChunks = useRef([]);\n  const streamRef = useRef(null);\n\n  const sketchState = useRef({\n    t: 0,\n    start,\n    duration,\n    rate,\n    width,\n    height,\n    loop,\n    autoPlay,\n    codeString,\n    prevCodeString: codeString,\n  });\n\n  const s = sketchState.current;\n\n  useEffect(() => {\n    s.start = start;\n    s.duration = duration;\n    s.rate = rate;\n    s.width = width;\n    s.height = height;\n    s.loop = loop;\n    s.autoPlay = autoPlay;\n    s.codeString = codeString;\n  }, [start, duration, rate, width, height, loop, autoPlay, s, codeString])\n\n  const [shouldPlay, setPlay] = useState(autoPlay);\n  const [shouldRecord, setRecord] = useState(false);\n  const [isRecording, setRecording] = useState(false);\n\n  const record = () => {\n    setRecord(true);\n    videoChunks.current = [];\n  };\n\n  const stopRecording = () => {\n    setRecord(false);\n  };\n\n  useEffect(() => {\n    if (streamRef.current === null) {\n      return;\n    }\n    if (recorderRef.current == null) {\n      // @ts-ignore\n      recorderRef.current = new MediaRecorder(streamRef.current, {\n        audioBitsPerSecond: 0,\n        videoBitsPerSecond: 2500000,\n        mimeType: 'video/webm',\n      });\n      // @ts-ignore\n      recorderRef.current.ondataavailable = e => {\n        if (e.data.size) {\n          console.log(\"Got chunk\", e.data);\n          // @ts-ignore\n          videoChunks.current.push(e.data);\n        }\n      };\n      // @ts-ignore\n      recorderRef.current.onstop = exportVideo;\n    }\n  });\n\n  function exportVideo(e) {\n    var blob = new Blob(videoChunks.current);\n    var vid = document.createElement('video');\n    vid.id = 'recorded'\n    vid.controls = true;\n    var source = document.createElement('source');\n    source.src = URL.createObjectURL(blob);\n    source.type = blob.type;\n    vid.appendChild(source);\n    document.body.appendChild(vid);\n    vid.play();\n  }\n\n  const Sketch = (p) => {\n\n    let timeSlider;\n    let time;\n    // let countSlider;\n    const execCodeString = (code) => eval(`\n      const __vars = {};\n      for (let m in p) {\n        __vars[m] = p[m];\n      }\n      ${code}\n      const entries = [];\n      for (let m in p) {\n        if (typeof p[m] === 'function' && !__vars[m]) {\n          entries.push([m, p[m]]);\n        }\n      }\n      Object.fromEntries(entries);`\n    );\n\n    const c = s.codeString ? (\n      (() => {\n        try {\n          const result = execCodeString(s.codeString);\n          s.prevCodeString = s.codeString;\n          return result;\n        } catch (e) {\n          console.error(\"Failed to compile.\", e);\n          return execCodeString(s.prevCodeString);\n        }\n      })()\n    ): code(p, s);\n\n    const getFriendlyTime = () => p.floor(s.start + s.t);\n    const getFriendlyDuration = () => p.floor(s.start + s.duration);\n    const formatTimeAndDuration = () => `${getFriendlyTime()} / ${getFriendlyDuration()}`;\n\n    const updateTime = (t) => {\n      timeSlider.value(t);\n      time.html(formatTimeAndDuration());\n    };\n\n    const stop = () => {\n      setPlay(false);\n      if (isRecording) {\n        setRecording(false);\n        // @ts-ignore\n        recorderRef.current.stop();\n      }\n      updateTime(0);\n    };\n\n    p.setup = () => {\n      // create canvas\n      const canvas = p.createCanvas(width, height);\n      streamRef.current = canvas.elt.captureStream(60)\n      p.textSize(15);\n      p.noStroke();\n\n      if (!shouldPlay && (timeSlider && timeSlider.value() === s.t)) {\n        p.noLoop();\n      }\n\n      // create sliders\n      timeSlider = p.createSlider(0, s.duration, s.t, 0.01);\n      timeSlider.style('width', `${width - playButtonSize - 8}px`);\n      timeSlider.style('margin-left', `${playButtonSize}px`);\n      timeSlider.addClass('e-range');\n      timeSlider.parent(timeSliderRef.current);\n\n      time = p.createSpan(formatTimeAndDuration());\n      time.addClass('seek-time');\n      time.parent(timeSliderRef.current);\n\n      if (c && c.setup) {\n        c.setup();\n      }\n\n      // countSlider = p.createSlider(0, 300, s.count, 0.01);\n      // countSlider.style('width', '200px');\n      // countSlider.addClass('e-range');\n      // countSlider.addClass('count-slider');\n      //\n      // const countSliderContainer = p.createDiv();\n      // countSliderContainer.addClass(\"count-slider-container\")\n      // countSliderContainer.parent(document.querySelector(\".sliders\"));\n      //\n      // const text = p.createSpan(\"Length\");\n      // text.parent(countSliderContainer);\n      // countSlider.parent(countSliderContainer);\n    }\n\n    p.draw = () => {\n      if (shouldRecord && !isRecording) {\n        updateTime(0);\n        setRecording(true);\n        setPlay(true);\n        // @ts-ignore\n        recorderRef.current.start(1000);\n      } else if (!shouldRecord && isRecording) {\n        // @ts-ignore\n        recorderRef.current.stop();\n        setRecording(false);\n      }\n\n      if (timeSlider.value() !== s.t) {\n        s.t = timeSlider.value();\n        updateTime(s.t);\n      }\n\n      let nextT = shouldPlay ? (s.t + s.rate) % s.duration : s.t;\n      if (c && c.draw) {\n        c.draw(s.start + s.t, s.start + nextT);\n      }\n\n      if (shouldPlay) {\n        s.t = nextT;\n        updateTime(s.t);\n        if (!loop && s.t + s.rate >= s.duration) {\n          stop();\n        }\n      }\n    }\n  }\n\n  const myRef = useRef<HTMLDivElement>(null);\n  const p5Ref = useRef<p5>(null);\n  useEffect(() => {\n      if (p5Ref.current != null) {\n        p5Ref.current.remove();\n      }\n      p5Ref.current = new p5(Sketch, myRef.current);\n    }\n  );\n\n  return (\n    <div ref={cellRef} className={\"cell\"}>\n      {showRecordButton &&\n        <button\n          ref={saveVideoRef}\n          onClick={() => {\n            if (isRecording) {\n              stopRecording();\n            } else {\n              record();\n            }\n          }}\n        >{isRecording ? 'Recording...' : 'Record'}</button>\n      }\n      <div className={\"sketch\"} ref={myRef}/>\n      <div ref={timeSliderRef} className={\"time-slider\"}/>\n      <button\n        className={`play-button${!shouldPlay ? '' : ' paused'}`}\n        onClick={() => {setPlay(!shouldPlay); }}\n      />\n      {/**\n        <div className={\"info\"}>\n          Controls:\n          <div className={\"sliders\"}>\n          </div>\n        </div>\n      */}\n    </div>\n  );\n}","import p5 from 'p5';\n\nexport const plot2D = p5.prototype.plot2D = function (\n  start, end, xFn, yFn, color = '#F76C5E', strokeWeight = 3\n) {\n  this.stroke(color);\n  this.strokeWeight(strokeWeight);\n  this.noFill();\n  this.beginShape();\n  this.curveVertex(xFn(start), yFn(start));\n  for (let i = start; i < end - 1; i++) {\n    this.curveVertex(xFn(i), yFn(i));\n  }\n  this.curveVertex(xFn(end - 1), yFn(end - 1));\n  this.curveVertex(xFn(end - 1), yFn(end - 1));\n  this.endShape();\n}","import p5 from 'p5';\nimport katex from 'katex';\n\nexport const latex = p5.prototype.latex = function latex(\n  text, x = 0, y = 0\n) {\n  let tex = this.createSpan();\n  tex.style('font-size', `${this.textSize()}px`);\n  tex.position(x, y);\n  katex.render(text, tex.elt);\n}","import p5 from 'p5';\nimport {plot2D} from \"./plot\";\nimport {latex} from \"./latex\";\n\np5.prototype.plot2D = plot2D;\np5.prototype.latex = latex;\n\nexport default p5;\n","import React, {useRef, useState} from \"react\";\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-jsx\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\nimport \"ace-builds/src-noconflict/ext-language_tools\"\nimport SketchCell from \"./SketchUtils/SketchCell\";\nimport {debounce} from \"react-ace/lib/editorOptions\";\n\nconst templateProgram = `s.start = 153;\ns.duration = 531 - 153;\n\np.setup = () => {\n  p.textSize(15);\n  p.latex(\"x = \\\\\\\\sum_{i=1}^{3} sin(\\\\\\\\frac{t}{10i})\", 8, 8);\n};\n\np.draw = (t, nextT) => {\n  p.background(0);\n  plot(t);\n};\n\nconst plot = (t, tail = 100, color = '#F76C5E') => {\n  p.plot2D(Math.max(0, t - tail), t, x1, y1_, color, 3);\n};\n\nconst x1 = (t) => {\n  // return t;\n  let scale = s.width / 10;\n  return s.width / 2 + scale * (p.sin(t/10) + p.sin(t/20) + p.sin(t/30));\n};\n\nconst y1_ = (t) => {\n  return s.height - y1(t);\n};\n\nconst y1 = (t) => {\n  // return t;\n  let scale = s.width / 10;\n  return s.height / 2 + scale * (p.cos(t / 10) + p.cos(t / 20) + p.cos(t / 30));\n};\n`;\n\nexport default function EditorCell({\n  width = 700,\n  updateOnChange = false,\n}) {\n  const [codeString, setCodeString] = useState(templateProgram);\n  const onChange = (newValue) => {\n    setCodeString(newValue);\n  };\n  const onBlur = (e, editor) => {\n    setCodeString(editor.getValue());\n  };\n  return (\n    <div>\n      <SketchCell\n        width={width}\n        height={(4/7) * width}\n        codeString={codeString}\n        rate={1}\n        loop={true}\n      />\n      {// @ts-ignore\n      }<AceEditor\n        style={{width: `${width}px`}}\n        // height={`${height}px`}\n        mode=\"jsx\"\n        theme=\"monokai\"\n        name=\"UNIQUE_ID_OF_DIV\"\n        onChange={updateOnChange ? debounce(onChange, 300) : undefined}\n        onBlur={!updateOnChange ? onBlur : undefined}\n        defaultValue={templateProgram}\n        editorProps={{ $blockScrolling: true }}\n        setOptions={{\n          enableBasicAutocompletion: true,\n          enableLiveAutocompletion: true,\n          enableSnippets: true\n        }}\n      />\n    </div>\n  );\n}","import React, {useLayoutEffect, useState} from 'react';\nimport SketchCell from \"./SketchUtils/SketchCell\";\nimport './App.css';\nimport EditorCell from \"./Notebook\";\n\nfunction App() {\n  // const code = (p, s) => {\n  //   const setup = () => {\n  //     p.textSize(15);\n  //     p.latex(\"x = \\\\sum_{i=1}^{3} sin(\\\\frac{t}{10i})\", 8, 8);\n  //   };\n  //\n  //   const draw = (t) => {\n  //     p.background(0);\n  //     plot(t);\n  //   };\n  //\n  //   const plot = (t, length= 100, color = '#F76C5E') => {\n  //     p.plot2D(t, length, x1, y1_, color, 3);\n  //   }\n  //\n  //   const x1 = (t) => {\n  //     // return t;\n  //     let scale = s.width / 10;\n  //     return s.width / 2 + scale * (p.sin(t/10) + p.sin(t/20) + p.sin(t/30));\n  //   }\n  //\n  //   const y1_ = (t) => {\n  //     return s.height - y1(t);\n  //   }\n  //\n  //   const y1 = (t) => {\n  //     // return t;\n  //     let scale = s.width / 10;\n  //     return s.height / 2 + scale * (p.cos(t / 10) + p.cos(t / 20) + p.cos(t / 30));\n  //   }\n  //   return {setup, draw};\n  // };\n\n  function useWindowSize() {\n    const [size, setSize] = useState([0, 0]);\n    useLayoutEffect(() => {\n      function updateSize() {\n        setSize([window.innerWidth, window.innerHeight]);\n      }\n      window.addEventListener('resize', updateSize);\n      updateSize();\n      return () => window.removeEventListener('resize', updateSize);\n    }, []);\n    return size;\n  }\n\n  const [width, _] = useWindowSize();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/*<SketchCell*/}\n        {/*  height={200}*/}\n        {/*  width={200}*/}\n        {/*  code={code}*/}\n        {/*  rate={2}*/}\n        {/*/>*/}\n        {width && <EditorCell width={width} updateOnChange={true} />}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}