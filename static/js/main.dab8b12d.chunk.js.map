{"version":3,"sources":["SketchUtils/SketchCell.tsx","SketchUtils/plot.ts","SketchUtils/latex.ts","SketchUtils/webgl.ts","SketchUtils/p5.ts","examples/plotAndParticles.ts","Notebook.tsx","examples/mandelbrot.ts","examples/doublePendulum.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SketchCell","start","duration","frameRate","rate","width","height","playButtonSize","autoPlay","loop","webgl","code","p","s","setup","draw","t","codeString","showRecordButton","canvasRef","useRef","cellRef","timeSliderRef","saveVideoRef","recorderRef","videoChunks","streamRef","sketchState","prevCodeString","current","useEffect","useState","shouldPlay","setPlay","shouldRecord","setRecord","isRecording","setRecording","record","stopRecording","exportVideo","e","blob","Blob","vid","document","createElement","id","controls","source","src","URL","createObjectURL","type","appendChild","body","play","MediaRecorder","audioBitsPerSecond","videoBitsPerSecond","mimeType","ondataavailable","data","size","console","log","push","onstop","Sketch","timeSlider","time","execCodeString","eval","c","result","error","getFriendlyTime","floor","getFriendlyDuration","formatTimeAndDuration","updateTime","value","html","stop","createCanvas","WEBGL","randomSeed","textSize","noStroke","noLoop","createSlider","style","addClass","parent","createSpan","nextT","myRef","p5Ref","rerender","remove","p5","ref","className","onClick","plot2D","prototype","end","xFn","yFn","strokeWeight","preVertex","fraction","this","noFill","beginShape","x","y","curveVertex","endShape","partial","i","lastX","lastY","latex","string","tex","position","katex","render","elt","isWebGL","text","_renderer","drawingContext","WebGLRenderingContext","plotAndParticles","hashCode","hash","length","charCodeAt","EditorCell","updateOnChange","setCodeString","defaultHeight","Math","parseInt","localStorage","getItem","toString","sketchHeight","setSketchHeight","str","prog","window","location","substr","toLowerCase","decodeURIComponent","escape","atob","onChange","newValue","history","pushState","btoa","unescape","encodeURIComponent","editorHeight","split","defaultSize","debounce","setItem","allowResize","mode","theme","name","undefined","onBlur","editor","getValue","defaultValue","editorProps","$blockScrolling","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","tabSize","printMargin","App","setSize","useLayoutEffect","updateSize","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dab8b12d.chunk.js","sourcesContent":["import React, {useCallback, useEffect, useRef, useState} from 'react';\nimport p5 from './p5';\nimport './slider.scss'\nimport './play-button.scss'\nimport './cell.scss';\ndeclare var MediaRecorder: any;\n\nexport default function SketchCell(\n  {\n    start = 0,\n    duration = 30,\n    frameRate = 60,\n    rate = 1,\n    width= 710,\n    height = 400,\n    playButtonSize = 30,\n    autoPlay = true,\n    loop = false,\n    webgl = false,\n    code = (p: p5, s: any) => ({\n      setup: () => {},\n      draw: (t) => {},\n    }),\n    codeString = \"\",\n  }\n) {\n  const showRecordButton = false;\n  // const recorderRef = useRef(new Recorder());\n  const canvasRef = useRef(null);\n  const cellRef = useRef(null);\n  const timeSliderRef = useRef(null);\n  const saveVideoRef = useRef(null);\n  const recorderRef = useRef(null);\n  const videoChunks = useRef([]);\n  const streamRef = useRef(null);\n\n  const sketchState = useRef({\n    t: 0,\n    start,\n    duration,\n    rate,\n    width,\n    height,\n    loop,\n    autoPlay,\n    codeString,\n    prevCodeString: codeString,\n    frameRate,\n    webgl,\n  });\n\n  const s = sketchState.current;\n\n  useEffect(() => {\n    s.start = start;\n    s.duration = duration;\n    s.rate = rate;\n    s.width = width;\n    s.height = height;\n    s.loop = loop;\n    s.autoPlay = autoPlay;\n    s.codeString = codeString;\n    s.frameRate = frameRate;\n  }, [start, duration, rate, width, height, loop, autoPlay, s, codeString, frameRate, webgl])\n\n  const [shouldPlay, setPlay] = useState(autoPlay);\n  const [shouldRecord, setRecord] = useState(false);\n  const [isRecording, setRecording] = useState(false);\n\n  const record = () => {\n    setRecord(true);\n    videoChunks.current = [];\n  };\n\n  const stopRecording = () => {\n    setRecord(false);\n  };\n\n  useEffect(() => {\n    if (streamRef.current === null) {\n      return;\n    }\n    if (recorderRef.current == null) {\n      // @ts-ignore\n      recorderRef.current = new MediaRecorder(streamRef.current, {\n        audioBitsPerSecond: 0,\n        videoBitsPerSecond: 2500000,\n        mimeType: 'video/webm',\n      });\n      // @ts-ignore\n      recorderRef.current.ondataavailable = e => {\n        if (e.data.size) {\n          console.log(\"Got chunk\", e.data);\n          // @ts-ignore\n          videoChunks.current.push(e.data);\n        }\n      };\n      // @ts-ignore\n      recorderRef.current.onstop = exportVideo;\n    }\n  }, []);\n\n  function exportVideo(e) {\n    var blob = new Blob(videoChunks.current);\n    var vid = document.createElement('video');\n    vid.id = 'recorded'\n    vid.controls = true;\n    var source = document.createElement('source');\n    source.src = URL.createObjectURL(blob);\n    source.type = blob.type;\n    vid.appendChild(source);\n    document.body.appendChild(vid);\n    vid.play();\n  }\n\n  const Sketch = (p) => {\n\n    let timeSlider;\n    let time;\n    // let countSlider;\n    const execCodeString = (code) => eval(`\n      const __vars = {};\n      for (let m in p) {\n        __vars[m] = p[m];\n      }\n      ${code}\n      const entries = [];\n      for (let m in p) {\n        if (typeof p[m] === 'function' && !__vars[m]) {\n          entries.push([m, p[m]]);\n        }\n      }\n      Object.fromEntries(entries);`\n    );\n\n    const c = s.codeString ? (\n      (() => {\n        try {\n          const result = execCodeString(s.codeString);\n          s.prevCodeString = s.codeString;\n          return result;\n        } catch (e) {\n          console.error(\"Failed to compile.\", e);\n          return execCodeString(s.prevCodeString);\n        }\n      })()\n    ): code(p, s);\n\n    const getFriendlyTime = () => p.floor(s.start + s.t);\n    const getFriendlyDuration = () => p.floor(s.start + s.duration);\n    const formatTimeAndDuration = () => `${getFriendlyTime()} / ${getFriendlyDuration()}`;\n\n    const updateTime = (t) => {\n      timeSlider.value(t);\n      time.html(formatTimeAndDuration());\n    };\n\n    const stop = () => {\n      setPlay(false);\n      if (isRecording) {\n        setRecording(false);\n        // @ts-ignore\n        recorderRef.current.stop();\n      }\n      updateTime(0);\n    };\n\n    p.setup = () => {\n      // create canvas\n      const canvas = s.webgl\n        ? p.createCanvas(width, height, p.WEBGL)\n        : p.createCanvas(width, height);\n      // streamRef.current = canvas.elt.captureStream(60)\n      p.randomSeed(1337);\n      p.frameRate(s.frameRate);\n      p.textSize(15);\n      p.noStroke();\n\n      if (!shouldPlay && (timeSlider && timeSlider.value() === s.t)) {\n        p.noLoop();\n      }\n\n      // create sliders\n      timeSlider = p.createSlider(0, s.duration, s.t, 0.01);\n      timeSlider.style('width', `${width - playButtonSize - 8}px`);\n      timeSlider.style('margin-left', `${playButtonSize}px`);\n      timeSlider.addClass('e-range');\n      timeSlider.parent(timeSliderRef.current);\n\n      time = p.createSpan(formatTimeAndDuration());\n      time.addClass('seek-time');\n      time.parent(timeSliderRef.current);\n\n      if (c && c.setup) {\n\n        try {\n          c.setup();\n        } catch (e) {\n          console.error(\"Failed to execute setup.\", e)\n        }\n      }\n\n      // countSlider = p.createSlider(0, 300, s.count, 0.01);\n      // countSlider.style('width', '200px');\n      // countSlider.addClass('e-range');\n      // countSlider.addClass('count-slider');\n      //\n      // const countSliderContainer = p.createDiv();\n      // countSliderContainer.addClass(\"count-slider-container\")\n      // countSliderContainer.parent(document.querySelector(\".sliders\"));\n      //\n      // const text = p.createSpan(\"Length\");\n      // text.parent(countSliderContainer);\n      // countSlider.parent(countSliderContainer);\n    }\n\n    p.draw = () => {\n      if (shouldRecord && !isRecording) {\n        updateTime(0);\n        setRecording(true);\n        setPlay(true);\n        // @ts-ignore\n        recorderRef.current.start(1000);\n      } else if (!shouldRecord && isRecording) {\n        // @ts-ignore\n        recorderRef.current.stop();\n        setRecording(false);\n      }\n\n      if (timeSlider.value() !== s.t) {\n        s.t = timeSlider.value();\n        updateTime(s.t);\n      }\n\n      let nextT = shouldPlay ? (s.t + s.rate) % s.duration : s.t;\n      if (c && c.draw) {\n        try {\n          c.draw(s.start + s.t, s.start + nextT);\n        } catch (e) {\n          p.noLoop();\n          console.error(\"Failed to execute draw.\", e)\n        }\n      }\n\n      if (shouldPlay) {\n        s.t = nextT;\n        updateTime(s.t);\n        if (!loop && s.t + s.rate >= s.duration) {\n          stop();\n        }\n      }\n    }\n  };\n\n  const myRef = useRef<HTMLDivElement>(null);\n  const p5Ref = useRef<p5>(null);\n  const rerender = () => {\n    if (myRef.current == null) return;\n    if (p5Ref.current != null) {\n      p5Ref.current.remove();\n    }\n    p5Ref.current = new p5(Sketch, myRef.current);\n  };\n  // const sketchCallback = useCallback(Sketch, [Sketch]);\n  useEffect(rerender, [Sketch]);\n\n  return (\n    <div ref={cellRef} className={\"cell\"}>\n      {showRecordButton &&\n        <button\n          ref={saveVideoRef}\n          onClick={() => {\n            if (isRecording) {\n              stopRecording();\n            } else {\n              record();\n            }\n          }}\n        >{isRecording ? 'Recording...' : 'Record'}</button>\n      }\n      <div className={\"sketch\"} ref={myRef}/>\n      <div ref={timeSliderRef} className={\"time-slider\"}/>\n      <button\n        className={`play-button${!shouldPlay ? '' : ' paused'}`}\n        onClick={() => {setPlay(!shouldPlay); }}\n      />\n      {/**\n        <div className={\"info\"}>\n          Controls:\n          <div className={\"sliders\"}>\n          </div>\n        </div>\n      */}\n    </div>\n  );\n}","import p5 from 'p5';\n\nexport const plot2D = p5.prototype.plot2D = function (\n  start, end, xFn, yFn, {strokeWeight = 3, preVertex = (fraction, value) => {}} = {}\n) {\n  this.strokeWeight(strokeWeight);\n  this.noFill();\n  this.beginShape();\n  preVertex(0, start);\n  let x = xFn(start), y = yFn(start);\n  this.curveVertex(x, y);\n  this.endShape();\n  const partial = 1 / (end - start);\n  for (let i = start; i <= end; i++) {\n    this.beginShape();\n    preVertex((i - start) * partial, i);\n    let lastX = xFn(i - 1), lastY = yFn(i - 1);\n    this.curveVertex(lastX, lastY);\n    this.curveVertex(lastX, lastY);\n    let x = xFn(i), y = yFn(i);\n    this.curveVertex(x, y);\n    this.curveVertex(x, y);\n    this.endShape();\n  }\n  this.beginShape();\n  preVertex(1, end);\n  x = xFn(end);\n  y = yFn(end);\n  this.curveVertex(x, y);\n  this.curveVertex(x, y);\n  this.endShape();\n  this.strokeWeight(1);\n}","import p5 from 'p5';\nimport katex from 'katex';\n\nexport const latex = p5.prototype.latex = function latex(\n  string, x = 0, y = 0\n) {\n  let tex = this.createSpan();\n  tex.style('font-size', `${this.textSize()}px`);\n  tex.position(x, y);\n  katex.render(string, tex.elt);\n}\n\nexport const text = p5.prototype.text = function text(\n  string, x = 0, y = 0,\n) {\n  return this.latex(`\\\\text{${string}}`, x, y);\n}","import p5 from \"p5\";\n\nexport const isWebGL = p5.prototype.isWebGL = function isWebGL() {\n  return this._renderer.drawingContext instanceof WebGLRenderingContext;\n}","import p5 from 'p5';\nimport {plot2D} from \"./plot\";\nimport {latex} from \"./latex\";\nimport {isWebGL} from \"./webgl\";\n\np5.prototype.plot2D = plot2D;\np5.prototype.latex = latex;\np5.prototype.isWebGL = isWebGL;\n\nexport default p5;\n","export const plotAndParticles = `// Player Settings\ns.start = 153;\ns.duration = 378 + 5 * 225;\ns.rate = 1;\ns.frameRate = 60;\ns.webgl = false;\n\n// Setup the P5.js Sketch\nlet particles = [];\np.setup = () => {\n  p.textSize(15);\n  // Convenience functions like \\`latex\\` are available.\n  p.text(\"The curve is defined by:\", 16, 16);\n  // Demonstrate our system of equations\n  p.latex(\n    \\`\\\\\\\\begin{cases}\n    \\${x1Latex}\\\\\\\\\\\\\\\\\n    \\${y1Latex}\n    \\\\\\\\end{cases}\\`,\n    16, 48\n  );\n\n  // This is where things that don't need to happen each frame should be called.\n  for(let i = 0;i<width/10;i++){\n    particles.push(new Particle());\n  }\n};\n\np.draw = (t, nextT) => {\n  // WebGL origin is the center.\n  if (p.isWebGL()) {\n    p.translate(- p.width / 2, - p.height / 2)\n  }\n  // Draw the background each frame\n  p.background('#0f0f0f');\n  // Plot our function based on the current time.\n  plot(t);\n  \n  // Update our particles\n  for(let i = 0;i<particles.length;i++) {\n    // Draw particles\n    particles[i].drawParticle();\n    // Move them according to the current time\n    particles[i].moveParticle(t);\n    // Draw connecting lines\n    particles[i].joinParticles(particles.slice(i));\n  }\n};\n\n// Change the color and stroke according to fraction of drawn plot.\nconst fadingGradient = (fraction, _) => {\n    p.stroke(\n        p.lerpColor(\n            p.color('#277DA1'),\n            p.color('#F76C5E'),\n            fraction,\n        )\n    );\n    p.strokeWeight(fraction * 3);\n};\n\n// Plot our functions!\nconst plot = (t, tail = 100) => {\n  p.translate(s.width / 2, -s.height / 2.25);\n  let start = Math.max(0, t - tail);\n  let end = t;\n  p.plot2D(start, end, x1, y1, {preVertex:  fadingGradient});\n  p.translate(-s.width / 2, s.height / 2.25);\n};\n\n// The LATEX for our additive cos function.\nconst x1Latex = \"x = \\\\\\\\sum_{i=1}^{3} sin(\\\\\\\\frac{t}{10i})\";\n// The x-location of the tip of the plot at a given time.\nconst x1 = (t, scale = Math.min(s.width, s.height) / 10) => {\n  // Additive sine function\n  return scale * (p.sin(t/10) + p.sin(t/20) + p.sin(t/30));\n};\n\n// The LATEX for our additive sin function.\nconst y1Latex = \"y = \\\\\\\\sum_{i=1}^{3} cos(\\\\\\\\frac{t}{10i})\";\n// The y-location of the tip of the plot at a given time.\nconst y1 = (t, scale = Math.min(s.width, s.height) / 10) => {\n  // Additive cosine function\n  const yLoc = scale * (p.cos(t / 10) + p.cos(t / 20) + p.cos(t / 30));\n  // Flip the axis so we're drawing from the bottom left.\n  return s.height - yLoc;\n};\n\n// Adapted \"Simulated Particles\" from p5.js docs\n// Should be functionally identical, but is parametrized by \\`t\\`.\n// https://p5js.org/examples/simulate-particles.html\nclass Particle {\n  // setting the co-ordinates, radius and the\n  // speed of a particle in both the co-ordinates axes.\n  constructor(){\n    this.x = this.originX = p.random(0,width);\n    this.y = this.originY = p.random(0,height);\n    this.r = p.random(width / 1000, width / 200);\n    this.xSpeed = p.random(-width / 500, width / 500);\n    this.ySpeed = p.random(-height / 500, height / 500);\n  }\n\n  // Creation of a particle.\n  drawParticle() {\n    p.noStroke();\n    p.fill('rgba(200,169,169,0.5)');\n    p.circle(this.x,this.y,this.r);\n  }\n  \n  // Make particles bounce of the sides\n  bounce (rawVal, max) {\n    const val = p.abs(rawVal);\n    let bounces = p.floor(val / max);\n    let remainder = val % max;\n    if (bounces % 2 == 1) {\n        remainder = (max - remainder);\n    }\n    return remainder;\n  }\n\n  // setting the particle in motion.\n  moveParticle(t) {\n    this.x = this.bounce(this.originX + this.xSpeed * t, width);\n    this.y = this.bounce(this.originY + this.ySpeed * t, height);\n  }\n\n  // this function creates the connections(lines)\n  // between particles which are less than a certain distance apart\n  joinParticles(particles) {\n    particles.forEach(element =>{\n      let dis = p.dist(this.x,this.y,element.x,element.y);\n      if (dis < Math.min(width, height) / 10) {\n        p.stroke('rgba(255,255,255,0.04)');\n        p.line(this.x,this.y,element.x,element.y);\n      }\n    });\n  }\n}\n`;","import React, {useEffect, useRef, useState} from \"react\";\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-jsx\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\nimport \"ace-builds/src-noconflict/ext-language_tools\"\nimport SketchCell from \"./SketchUtils/SketchCell\";\nimport {debounce} from \"react-ace/lib/editorOptions\";\nimport SplitPane from \"react-split-pane\";\nimport './Notebook.scss';\nimport {plotAndParticles} from \"./examples/plotAndParticles\";\nimport {doublePendulum} from \"./examples/doublePendulum\";\nimport {mandelbrot} from \"./examples/mandelbrot\";\n\nconst templateProgram = `// Player Settings\ns.start = 153;\ns.duration = 378 + 5 * 225;\ns.rate = 1;\ns.frameRate = 60;\ns.webgl = false;\n\n// Setup the P5.js Sketch\nlet particles = [];\np.setup = () => {\n  p.textSize(15);\n  // Convenience functions like \\`latex\\` are available.\n  p.text(\"The curve is defined by:\", 16, 16);\n  // Demonstrate our system of equations\n  p.latex(\n    \\`\\\\\\\\begin{cases}\n    \\${x1Latex}\\\\\\\\\\\\\\\\\n    \\${y1Latex}\n    \\\\\\\\end{cases}\\`,\n    16, 48\n  );\n\n  // This is where things that don't need to happen each frame should be called.\n  for(let i = 0;i<width/10;i++){\n    particles.push(new Particle());\n  }\n};\n\np.draw = (t, nextT) => {\n  // WebGL origin is the center.\n  if (p.isWebGL()) {\n    p.translate(- p.width / 2, - p.height / 2)\n  }\n  // Draw the background each frame\n  p.background('#0f0f0f');\n  // Plot our function based on the current time.\n  plot(t);\n  \n  // Update our particles\n  for(let i = 0;i<particles.length;i++) {\n    // Draw particles\n    particles[i].drawParticle();\n    // Move them according to the current time\n    particles[i].moveParticle(t);\n    // Draw connecting lines\n    particles[i].joinParticles(particles.slice(i));\n  }\n};\n\n// Change the color and stroke according to fraction of drawn plot.\nconst fadingGradient = (fraction, _) => {\n    p.stroke(\n        p.lerpColor(\n            p.color('#277DA1'),\n            p.color('#F76C5E'),\n            fraction,\n        )\n    );\n    p.strokeWeight(fraction * 3);\n};\n\n// Plot our functions!\nconst plot = (t, tail = 100) => {\n  p.translate(s.width / 2, -s.height / 2.25);\n  let start = Math.max(0, t - tail);\n  let end = t;\n  p.plot2D(start, end, x1, y1, {preVertex:  fadingGradient});\n  p.translate(-s.width / 2, s.height / 2.25);\n};\n\n// The LATEX for our additive cos function.\nconst x1Latex = \"x = \\\\\\\\sum_{i=1}^{3} sin(\\\\\\\\frac{t}{10i})\";\n// The x-location of the tip of the plot at a given time.\nconst x1 = (t, scale = Math.min(s.width, s.height) / 10) => {\n  // Additive sine function\n  return scale * (p.sin(t/10) + p.sin(t/20) + p.sin(t/30));\n};\n\n// The LATEX for our additive sin function.\nconst y1Latex = \"y = \\\\\\\\sum_{i=1}^{3} cos(\\\\\\\\frac{t}{10i})\";\n// The y-location of the tip of the plot at a given time.\nconst y1 = (t, scale = Math.min(s.width, s.height) / 10) => {\n  // Additive cosine function\n  const yLoc = scale * (p.cos(t / 10) + p.cos(t / 20) + p.cos(t / 30));\n  // Flip the axis so we're drawing from the bottom left.\n  return s.height - yLoc;\n};\n\n// Adapted \"Simulated Particles\" from p5.js docs\n// Should be functionally identical, but is parametrized by \\`t\\`.\n// https://p5js.org/examples/simulate-particles.html\nclass Particle {\n  // setting the co-ordinates, radius and the\n  // speed of a particle in both the co-ordinates axes.\n  constructor(){\n    this.x = this.originX = p.random(0,width);\n    this.y = this.originY = p.random(0,height);\n    this.r = p.random(width / 1000, width / 200);\n    this.xSpeed = p.random(-width / 500, width / 500);\n    this.ySpeed = p.random(-height / 500, height / 500);\n  }\n\n  // Creation of a particle.\n  drawParticle() {\n    p.noStroke();\n    p.fill('rgba(200,169,169,0.5)');\n    p.circle(this.x,this.y,this.r);\n  }\n  \n  // Make particles bounce of the sides\n  bounce (rawVal, max) {\n    const val = p.abs(rawVal);\n    let bounces = p.floor(val / max);\n    let remainder = val % max;\n    if (bounces % 2 == 1) {\n        remainder = (max - remainder);\n    }\n    return remainder;\n  }\n\n  // setting the particle in motion.\n  moveParticle(t) {\n    this.x = this.bounce(this.originX + this.xSpeed * t, width);\n    this.y = this.bounce(this.originY + this.ySpeed * t, height);\n  }\n\n  // this function creates the connections(lines)\n  // between particles which are less than a certain distance apart\n  joinParticles(particles) {\n    particles.forEach(element =>{\n      let dis = p.dist(this.x,this.y,element.x,element.y);\n      if (dis < Math.min(width, height) / 10) {\n        p.stroke('rgba(255,255,255,0.04)');\n        p.line(this.x,this.y,element.x,element.y);\n      }\n    });\n  }\n}\n`;\n\nfunction to_b64( str ) {\n  return window.btoa(unescape(encodeURIComponent( str )));\n}\n\nfunction from_b64( str ) {\n  return decodeURIComponent(escape(window.atob( str )));\n}\n\nfunction hashCode(string){\n  let hash = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string.charCodeAt(i);\n    hash = ((hash<<5)-hash) + character;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return hash;\n}\n\nexport default function EditorCell({\n  height,\n  width = 700,\n  updateOnChange = false,\n}) {\n  const [readyToRender, setReadyToRender] = useState(false);\n  const [codeString, setCodeString] = useState(``);\n  const defaultHeight = useRef(Math.floor((4/7) * width));\n  useEffect(() => {\n    defaultHeight.current = parseInt(\n      localStorage.getItem('splitPos') ?? defaultHeight.current.toString(), 10\n    );\n  }, []);\n\n  const [sketchHeight, setSketchHeight] = useState(defaultHeight.current);\n  useEffect(() => {\n    const prog = window.location.hash.substr(1);\n    if (!prog.length) {\n      setCodeString(plotAndParticles);\n      return;\n    }\n    if (prog.toLowerCase() === \"pendulum\") {\n      setCodeString(doublePendulum);\n      return;\n    }\n    if (prog.toLowerCase() === \"mandelbrot\") {\n      setCodeString(mandelbrot);\n      return;\n    }\n    try {\n      const code = from_b64(prog.substr(1));\n      setCodeString(code);\n    } catch (e) {\n      console.error(\"Unable to parse program, falling back to template.\");\n      window.location.hash = \"\";\n      setCodeString(plotAndParticles);\n    }\n  }, []);\n\n  const onChange = (newValue) => {\n    if (hashCode(codeString) !== hashCode(newValue)) {\n      setCodeString(newValue);\n      window.history.pushState({}, 'Viz Code Update', `#${to_b64(newValue)}`);\n    }\n  };\n  const onBlur = (e, editor) => onChange(editor.getValue());\n  const editorHeight = height - sketchHeight;\n\n  const updateSize = (size) => {\n    localStorage.setItem('splitPos', size.toString());\n    setSketchHeight(size);\n  };\n\n  return (\n    <div>\n      {codeString && <SplitPane\n        split=\"horizontal\"\n        defaultSize={sketchHeight}\n        onChange={debounce(updateSize, 300)}\n        allowResize={true}\n      >\n        <SketchCell\n        width={width}\n        height={sketchHeight}\n        codeString={codeString}\n        rate={1}\n        loop={true}\n      />\n      {// @ts-ignore\n      }{editorHeight > 0 && <AceEditor\n        style={{width: `${width}px`}}\n        height={`${height - sketchHeight}px`}\n        mode=\"jsx\"\n        theme=\"monokai\"\n        name=\"UNIQUE_ID_OF_DIV\"\n        onChange={updateOnChange ? debounce(onChange, 300) : undefined}\n        onBlur={!updateOnChange ? onBlur : undefined}\n        value={codeString}\n        defaultValue={codeString}\n        editorProps={{$blockScrolling: true}}\n        setOptions={{\n          enableBasicAutocompletion: true,\n          enableLiveAutocompletion: true,\n          enableSnippets: true,\n          tabSize: 2,\n          printMargin: false,\n        }}\n      />}\n      </SplitPane>}\n    </div>\n  );\n}","export const mandelbrot = `s.start = 940;\ns.duration = 2200 - s.start;\ns.webgl = true;\n\n// the 'varying's are shared between both vertex & fragment shaders\nlet varying = 'precision highp float; varying vec2 vPos;';\n\n// the vertex shader is called for each vertex\nlet vs =\n  varying +\n  'attribute vec3 aPosition;' +\n  'void main() { vPos = (gl_Position = vec4(aPosition,1.0)).xy; }';\n\n// the fragment shader is called for each pixel\nlet fs =\n  varying +\n  'uniform vec2 p;' +\n  'uniform float r;' +\n  'const int I = 500;' +\n  'void main() {' +\n  '  vec2 c = p + vPos * r, z = c;' +\n  '  float n = 0.0;' +\n  '  for (int i = I; i > 0; i --) {' +\n  '    if(z.x*z.x+z.y*z.y > 4.0) {' +\n  '      n = float(i)/float(I);' +\n  '      break;' +\n  '    }' +\n  '    z = vec2(z.x*z.x-z.y*z.y, 2.0*z.x*z.y) + c;' +\n  '  }' +\n  '  gl_FragColor = vec4(0.5-cos(n*12.0)/1.0,0.5-cos(n*13.0)/2.0,0.5-cos(n*23.0)/2.0,1.0);' +\n  '}';\n\nlet mandel;\np.setup = () => {\n  p.textSize(15);\n  p.text(\"Mandelbrot\", 8, 8);\n\n  \n  mandel = p.createShader(vs, fs);\n  p.shader(mandel);\n  p.noStroke();\n\n  // 'p' is the center point of the Mandelbrot image\n  mandel.setUniform('p', [-0.74364388703, 0.13182590421]);\n};\n\np.draw = (t, nextT) => {\n  p.background(0);\n  p.translate(-s.width / 2, -s.height / 2);\n    mandel.setUniform('r', 1.5 * p.exp(-6.5 * (1 + p.sin(t / 200))));\n      p.quad(-1, -1, 1, -1, 1, 1, -1, 1);\n};`;","export const doublePendulum = `// Adapted (look, feel, and parameterized by time) from:\n// Daniel Shiffman\n// https://thecodingtrain.com/CodingChallenges/093-double-pendulum.html\n\nlet size = Math.min(height, width);\n\nlet r1 = size / 6;\nlet r2 = r1;\nlet m1 = r1 / 7;\nlet m2 = m1;\nlet a1 = 0;\nlet a2 = 0;\nlet a1_v = 0;\nlet a2_v = 0;\nlet g = size / 500;\n\nlet px2 = -1;\nlet py2 = -1;\nlet cx, cy;\n\nlet buffer;\nlet frames = [];\n\ns.duration = 1000;\n\np.setup = () => {\n  a1 = p.PI / 2;\n  a2 = p.PI / 2;\n  cx = p.width / 2;\n  cy = p.height / 4;\n  \n  frames = [];\n  for (var i = 0; i < s.duration; i++) {\n    let num1 = -g * (2 * m1 + m2) * p.sin(a1);\n    let num2 = -m2 * g * p.sin(a1 - 2 * a2);\n    let num3 = -2 * p.sin(a1 - a2) * m2;\n    let num4 = a2_v * a2_v * r2 + a1_v * a1_v * r1 * p.cos(a1 - a2);\n    let den = r1 * (2 * m1 + m2 - m2 * p.cos(2 * a1 - 2 * a2));\n    let a1_a = (num1 + num2 + num3 * num4) / den;\n  \n    num1 = 2 * p.sin(a1 - a2);\n    num2 = (a1_v * a1_v * r1 * (m1 + m2));\n    num3 = g * (m1 + m2) * p.cos(a1);\n    num4 = a2_v * a2_v * r2 * m2 * p.cos(a1 - a2);\n    den = r2 * (2 * m1 + m2 - m2 * p.cos(2 * a1 - 2 * a2));\n    let a2_a = (num1 * (num2 + num3 + num4)) / den;\n  \n    let x1 = r1 * p.sin(a1);\n    let y1 = r1 * p.cos(a1);\n  \n    let x2 = x1 + r2 * p.sin(a2);\n    let y2 = y1 + r2 * p.cos(a2);\n    \n    frames.push({x1, x2, y1, y2, px2, py2});\n    \n    a1_v += a1_a;\n    a2_v += a2_a;\n    a1 += a1_v;\n    a2 += a2_v;\n  \n    px2 = x2;\n    py2 = y2;\n  }\n}\n\np.draw = (t) => {\n  const fadingGradient = (_, value, minVal = 0.2, length = s.duration / 5) => {\n    let fraction = Math.max(minVal, 1 - ((t-value) / length));\n    p.stroke(\n        p.lerpColor(\n            p.color('#277DA1'),\n            p.color('#F76C5E'),\n            fraction,\n        )\n    );\n    p.strokeWeight(fraction * 3);\n};\n  \n  const {x1, x2, y1, y2, px2, py2} = frames[p.floor(t)];\n  \n  p.background(0);\n  \n  p.translate(cx, cy);\n  p.stroke('white');\n  p.strokeWeight(2);\n\n  p.line(0, 0, x1, y1);\n  p.fill(0);\n  p.ellipse(x1, y1, m1, m1);\n\n  p.line(x1, y1, x2, y2);\n  p.fill(0);\n  p.ellipse(x2, y2, m2, m2);\n  \n  if (t >= 1) {\n    p.plot2D(1, p.floor(t), (i) => frames[i].x2, (i) => frames[i].y2, {strokeWeight: 2, preVertex: fadingGradient})\n  }\n}\n`;","import React, {useLayoutEffect, useState} from 'react';\nimport SketchCell from \"./SketchUtils/SketchCell\";\nimport './App.css';\nimport EditorCell from \"./Notebook\";\n\nfunction App() {\n  // const code = (p, s) => {\n  //   const setup = () => {\n  //     p.textSize(15);\n  //     p.latex(\"x = \\\\sum_{i=1}^{3} sin(\\\\frac{t}{10i})\", 8, 8);\n  //   };\n  //\n  //   const draw = (t) => {\n  //     p.background(0);\n  //     plot(t);\n  //   };\n  //\n  //   const plot = (t, length= 100, color = '#F76C5E') => {\n  //     p.plot2D(t, length, x1, y1_, color, 3);\n  //   }\n  //\n  //   const x1 = (t) => {\n  //     // return t;\n  //     let scale = s.width / 10;\n  //     return s.width / 2 + scale * (p.sin(t/10) + p.sin(t/20) + p.sin(t/30));\n  //   }\n  //\n  //   const y1_ = (t) => {\n  //     return s.height - y1(t);\n  //   }\n  //\n  //   const y1 = (t) => {\n  //     // return t;\n  //     let scale = s.width / 10;\n  //     return s.height / 2 + scale * (p.cos(t / 10) + p.cos(t / 20) + p.cos(t / 30));\n  //   }\n  //   return {setup, draw};\n  // };\n\n  function useWindowSize() {\n    const [size, setSize] = useState([0, 0]);\n    useLayoutEffect(() => {\n      function updateSize() {\n        setSize([window.innerWidth, window.innerHeight]);\n      }\n      window.addEventListener('resize', updateSize);\n      updateSize();\n      return () => window.removeEventListener('resize', updateSize);\n    }, []);\n    return size;\n  }\n\n  const [width, height] = useWindowSize();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/*<SketchCell*/}\n        {/*  height={200}*/}\n        {/*  width={200}*/}\n        {/*  code={code}*/}\n        {/*  rate={2}*/}\n        {/*/>*/}\n        {width && <EditorCell height={height} width={width} updateOnChange={true} />}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}